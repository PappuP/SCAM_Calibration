Directories of file: /data/keeling/a/pappup2/a/CESM2/CAM7/CAM/cime/scripts/
/data/keeling/a/pappup2/a/Python_Practice/Prelim/

USE CAM7: F2000_check



1. Create A case in CESM2 with F2000climo compset and add the lines below in user_nl_cam and then run the case
Check the modification in CAM section below


2.Run the following script on the resulting h1 files:
./bld/scripts/camfv2iop.ncl
This will create a SCAM IOP file
for Keeling: 
bash
module load ncl/ncl-6.6.2
ncl camfv2iop_copy.ncl   ### this one doesnt work segmentation fault occured when tried all 3 months/1 months at a time, so I breakdown using the python code (~a/Python_Practice/Prelim/user_forcing.ipynb) month at a time (hist_stream func inside the ncl script) then use ncl to concataneted all the seperate monthly iops
then the same code(~a/Python_Practice/Prelim/user_forcing.ipynb), I concatanate them and make one forcing file for scam 



3. Folow the 3rd step mention in the link for the generation of initial condition: https://ncar.github.io/CAM/doc/build/html/users_guide/atmospheric-configurations.html#example-setting-up-user-defined-iop-for-scam
For this we need monthly history average (default h0) CAM output. So chnage the user_nl_cam accridingly for this in CAM simulation.
	•	module load ncl/ncl-6.6.2
1. Do tis in terminal
	•	export DSTLATLON=/data/keeling/a/pappup2/a/CESM2/CESM2_input_data/atm/cam/inic/gaus/cami_0000-01-01_64x128_L32_c170510.nc    ###### map filr do tis in terminal, we select this one as by default it was as ncdata for scam
2. Run the remapfv2eul.ncl script with the source file set to the initial condition file (SRC = <case>.cam.i.<month> file) that is output from the CAM simulation.
	•	export SRCFILE=/data/keeling/a/pappup2/a/CESM/F2000f09g16_4K/CESM_output_data/atm/hist/ <case>.cam.i.<month>        ###### montly fil3 (h0) from cam run, only produce atleast 1 year run. For small run use (INITHIST='MONTHLY') this in user_nl_cal
	•	ncl remapfv2eul.ncl
3. Re-run the remapfv2eul.ncl script with the source file set to one of the monthly (h0) files (SRC = <case>.cam.h0.<month> file). This allows the monthly averaged aerosols to be used for the relaxation.	•	export SRCFILE=/data/keeling/a/pappup2/a/CESM/F2000f09g16_4K/CESM_output_data/atm/hist/ <case>.cam.h0.<month>       ###### montly fil3 (h0) from cam run
	•	ncl remapfv2eul.ncl
4. Copy the re-gridded initial condition file to make a new one. E.g.: cp <case>.cam.i.<date>.regrid.Gaus_64x128.nc <case>.cam.i.regrid.Gaus_64x128.nc
Use the ncks NCO command to move averaged aerosols from the regridded monthly file to the regridded initial condition file:
	•	ncks -A -v bc_a1,dst_a1,dst_a3,ncl_a1,ncl_a2,ncl_a3,num_a1,num_a2,num_a3,pom_a1,so4_a1,so4_a2,so4_a3,soa_a1,soa_a2,bc_a4,num_a4,pom_a4 F2000_check.cam.h0.0001-01-01-00000.regrid.Gaus_64x128.nc F2000_check.cam.i.regrid.Gaus_64x128.nc
5. Finally, one last step is to ‘fix’ the attributes for aerosol number. The initial condition file needs a mixing ratio, whereas number units in the h0 files used to make the initial condition file are actually 1/kg. Again using NCO:
	•	ncatted -O -a units,num_a1,o,c,"kg/kg" -a units,num_a2,o,c,"kg/kg" -a units,num_a3,o,c,"kg/kg" -a units,num_a4,o,c,"kg/kg" <case>.cam.i.regrid.Gaus_64x128.nc




Add the varibale in user_nl_cam and then if all of them are not included to namelist_definition.xml then we need to include it here: /data/keeling/a/pappup2/CESM2_1_5/components/cam/bld/namelist_files/namelist_definition.xml

Then it will run and the new variabe will show up in atm_in in the CaseDocs in case directoty


				Need to do these thing before submit the SCAM case
..............................................................................................
SCAM case: c3
./xmlchange DOUT_S=FALSE
Try setting phys_loadbalance=0 or 1 in user_nl_cam, 0 works better in keeling, see the namelist_definition.xml what these value means
To edit env_batch.xml --nodes=2 --ntasks-per-node=1 I change the machine config files and added a new machine keeling_scam

user_nl_cam:
iopfile="/data/keeling/a/pappup2/a/CESM2/IOP_user/F2000.sgptst.iop.nc"
ncdata="/data/keeling/a/pappup2/a/CESM2/CAM7/CAM/bld/scripts/F2000_check.cam.i.regrid.Gaus_64x128.nc"
nhtfrq = -3
scm_use_obs_uv = .true.
scm_relaxation         = .true.
scm_relax_fincl = 'T', 'bc_a1', 'bc_a4', 'dst_a1', 'dst_a2', 'dst_a3', 'ncl_a1', 'ncl_a2',
                   'ncl_a3', 'num_a1', 'num_a2', 'num_a3',
                   'num_a4', 'pom_a1', 'pom_a4', 'so4_a1', 'so4_a2', 'so4_a3', 'soa_a1', 'soa_a2'
scm_relax_linear             = .true.
scm_relax_tau_bot_sec                = 864000.
scm_relax_tau_top_sec                = 86400.
scm_iop_tg=.true.


			Need to do these thing before submit the FULL CAM case
..............................................................................................
CAM7 case: 
./xmlchange DOUT_S=FALSE

Model was slow 0.01SYPD so use phys_loadbalance=0 and it works
Try setting phys_loadbalance=0 or 1 in user_nl_cam, 0 works better in keeling, see the namelist_definition.xml what these value means


F2000_check --forcing failed in scam run
F2000_def_2deg-- 2deg forcing failed in scam run
so the modification I did:
The fincl3lonlat is not working properly, so I bypassed it manually. By using the chunk of code below in the user_nl_cam & the python code ~a/Python_practice/Prelim/user_forcing.ipynb
user_nl_cam:

fincl3='U','V','T','Q','OMEGA','TTEND_TOT','PTTEND','TAQ','TS','PS','PSL'
fincl4='U','V','T','Q','OMEGA','TTEND_TOT','PTTEND','TAQ','TS','PS','PSL'
fincl4lonlat = '262.5e_36.6n'
nhtfrq = 0,-3,-3,-3
avgflag_pertape = 'I','I','I'
phys_loadbalance=0

./xmlchnage STOP_OPTION=nsteps
./xmlchange STOP_N=4384        ### as ATM_NCPL=48, so 4384/48~91.33 days i.e., 3 months

NB: COSP: ./xmlchange --append CAM_CONFIG_OPTS='-cosp'
For some reason cosp build failed will digonse it later if we really need it

..............................................................................................
before running the case make sure the ATM_NCPL i.e., time steps work propoerly
Script to generate PPE: to use this script use bash terminal
#!/usr/bin/env python3
import os
import subprocess
import xarray as xr

# Define paths
cesm_root = "/data/keeling/a/pappup2/CESM2_1_5"  # Path to CESM source code
case_root = "/data/keeling/a/pappup2/CESM2_1_5/cime/scripts/"  # Path to store case directories
nc_file_path = "/data/keeling/a/pappup2/Python_Practice/CESM_PPE/SCAM_300.nc"  # Path to the NetCDF file containing the parameter data

# CESM configuration
res = "T42_T42"  # seientifically supported grid for FSCAM (2.8*2.8deg)
compset = "FSCAM"  # Example compset (adjust as needed)
usermoddir="/data/keeling/a/pappup2/CESM2_1_5/components/cam/cime_config/usermods_dirs/scam_arm97"
# Load the NetCDF file
ds = xr.open_dataset(nc_file_path)
parameter_names = list(ds.keys())  # Extract all variable names (assumed to be the 32 parameters)

# Validate dimensions
num_cases = len(ds[parameter_names[0]])  # Check the number of rows (300)
num_params = len(parameter_names)        # Check the number of parameters (32)

if num_cases != 300:
    raise ValueError(f"NetCDF file does not have the expected 300 cases. Found: {num_cases}")
if num_params != 31:
    raise ValueError(f"NetCDF file does not have the expected 32 parameters. Found: {num_params}")
parameters = {var: ds[var].values.squeeze() for var in parameter_names}  # Extract data for all parameters
ds.close()

# Loop over cases
for i in range(1, 2):
    # Define case name and paths
    case_name = f"case_{i:03d}"
    case_path = os.path.join(case_root, case_name)

    # Step 1: Create the case
    try:
        subprocess.run(
            [
                os.path.join(cesm_root, "cime", "scripts", "create_newcase"),
                "--case", case_path,
                "--res", res,
                "--compset", compset,
                "--mach", "keeling_scam",    #### change the machine name for scam: keeling_scam, for cam: keeling
                "--user-mods-dir",usermoddir,
            ],
            check=True,
        )
        print(f"Case {case_name} created successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error creating case {case_name}: {e}")
        continue

    # Step 2: Configure the case
    os.chdir(case_path)
    try:
        subprocess.run(["./case.setup"], check=True)
        print(f"Case {case_name} setup completed.")
    except subprocess.CalledProcessError as e:
        print(f"Error during setup for {case_name}: {e}")
        continue

    # Step 3: Modify `user_nl_cam`
    try:
        # Prepare updates for `user_nl_cam` using the i-th row of parameters
        updates = [f"{var} = {parameters[var][i - 1]}" for var in parameter_names]

        user_nl_cam_path = os.path.join(case_path, "user_nl_cam")
        with open(user_nl_cam_path, "a") as nl_file:
            nl_file.write("\n".join(updates) + "\n")
        print(f"Updated user_nl_cam for {case_name}.")
    except Exception as e:
        print(f"Error modifying user_nl_cam for {case_name}: {e}")
        continue

    # Step 4: Build the case
    try:
        subprocess.run(["./case.build"], check=True)
        print(f"Case {case_name} built successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error during build for {case_name}: {e}")
        continue

    # Step 5: Submit the case
    try:
        subprocess.run(["./case.submit"], check=True)
        print(f"Case {case_name} submitted successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error submitting case {case_name}: {e}")
        continue





Default Values:
micro_mg_accre_enhan_fact = 1.0
micro_mg_autocon_fact = 0.01
micro_mg_autocon_lwp_exp = 2.47
micro_mg_autocon_nd_exp = -1.1
micro_mg_berg_eff_factor = 1.0
micro_mg_dcs = 500e-06
micro_mg_effi_factor = 1.0
micro_mg_homog_size = 25e-06
micro_mg_iaccr_factor = 1.0
micro_mg_max_nicons = 100e06
micro_mg_vtrmi_factor = 1.0
microp_aero_npccn_scale = 1.0
microp_aero_wsub_min = 0.2
microp_aero_wsub_scale = 1.0
microp_aero_wsubi_min = 0.001
microp_aero_wsubi_scale = 1.0
dust_emis_fact = 0.7
seasalt_emis_scale = 1.0
sol_factb_interstitial = 0.1
sol_factic_interstitial = 0.4
cldfrc_dp1 = 0.1
cldfrc_dp2 = 500.0
zmconv_c0_lnd = 0.0075
zmconv_c0_ocn = 0.03
zmconv_capelmt = 70.0
zmconv_dmpdz = -1e-03
zmconv_ke = 5.0e-06
zmconv_ke_lnd = 1e-05
zmconv_momcd = 0.7
zmconv_num_cin = 1
zmconv_tiedke_add = 0.5


Random:
micro_mg_accre_enhan_fact = 6.0
micro_mg_autocon_fact = 0.1
micro_mg_autocon_lwp_exp = 2.5
micro_mg_autocon_nd_exp = -1.5
micro_mg_berg_eff_factor = 0.5
micro_mg_dcs = 600e-06
micro_mg_effi_factor = 1.5
micro_mg_homog_size = 100e-06
micro_mg_iaccr_factor = 0.5
micro_mg_max_nicons = 500e06
micro_mg_vtrmi_factor = 4.0
microp_aero_npccn_scale = 2.0
microp_aero_wsub_min = 0.25
microp_aero_wsub_scale = 4.0
microp_aero_wsubi_min = 0.01
microp_aero_wsubi_scale = 3.0
dust_emis_fact = 0.5
seasalt_emis_scale = 2.0
sol_factb_interstitial = 0.4
sol_factic_interstitial = 0.6
cldfrc_dp1 = 0.2
cldfrc_dp2 = 800.0
zmconv_c0_lnd = 0.075
zmconv_c0_ocn = 0.02
zmconv_capelmt = 300.0
zmconv_dmpdz = -2e-03
zmconv_ke = 5.0e-06
zmconv_ke_lnd = 1e-05














